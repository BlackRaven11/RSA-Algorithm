from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes
---------------------------------------------------------------------------------------------------------------------------------
Begining of the explanation of libraries
---------------------------------------------------------------------------------------------------------------------------------
We import the necessary modules from the cryptography library. 
serialization provides functions for serializing and deserializing cryptographic objects,
rsa is used for RSA key generation, 
and padding and hashes are used for encryption and hashing operations.
---------------------------------------------------------------------------------------------------------------------------------
END of the explanation of libraries
---------------------------------------------------------------------------------------------------------------------------------





---------------------------------------------------------------------------------------------------------------------------------
def encrypt_message(message, public_key):
    # Encrypt the message using the public key
    encrypted_message = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted_message
---------------------------------------------------------------------------------------------------------------------------------
Begining of the explanation of the encrypt_message function
---------------------------------------------------------------------------------------------------------------------------------
1.The encrypt_message function is defined, which takes two parameters: 
message (the plaintext message to be encrypted) and public_key (the public key used for encryption).

2.We begin the encryption process using the public_key.encrypt method.
 This method encrypts the message using the provided public key.

3.The message is encoded using the encode() method to convert it into bytes, 
as encryption algorithms typically work with bytes rather than strings.

4.The encryption is performed using the OAEP (Optimal Asymmetric Encryption Padding) scheme,
 which provides probabilistic encryption and enhances security.

To configure the OAEP padding, we create an instance of padding.OAEP and pass it the parameters mgf (mask generation function) 
and algorithm (hash algorithm used within the OAEP scheme). 
Here, we use MGF1 with SHA-256 as the mask generation function and SHA-256 as the hash algorithm.

5.The label parameter is set to None since it is optional and not used in this example.

6.Finally, the encrypted message is returned as the result of the encrypt_message function.
---------------------------------------------------------------------------------------------------------------------------------
END OF EXPLAINING encrypt_message function
---------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------
with open("public_key.pem", "rb") as key_file:
    public_key = serialization.load_pem_public_key(
        key_file.read(),
        backend=None
    )
---------------------------------------------------------------------------------------------------------------------------------
Begining of the explanation of the reding public key from file
---------------------------------------------------------------------------------------------------------------------------------
We open the public_key.pem file in read-binary mode using the open function, which contains the serialized public key.

Inside the with statement, we read the contents of the file using the read method of the key_file object.

The serialization.load_pem_public_key function is used to deserialize the public key from the read contents. 
We pass the serialized key and set the backend parameter to None to use the default backend.

The deserialized public key is assigned to the public_key variable.
---------------------------------------------------------------------------------------------------------------------------------
END of the explanation of the reading public key from file
---------------------------------------------------------------------------------------------------------------------------------




---------------------------------------------------------------------------------------------------------------------------------
Begining of the explanation of the (input from user , encrypting it and writing it into file)
---------------------------------------------------------------------------------------------------------------------------------

plaintext = input("Enter the message to encrypt: ")
---------------------------------------------------------------------------------------------------------------------------------
We prompt the user to enter the message they want to encrypt using the input function,
and the input is stored in the plaintext variable.
---------------------------------------------------------------------------------------------------------------------------------
encrypted_message = encrypt_message(plaintext, public_key)
---------------------------------------------------------------------------------------------------------------------------------
The encrypt_message function is called with the plaintext message (plaintext)
and the public key (public_key) as arguments. 
The returned encrypted message is assigned to the encrypted_message variable.
---------------------------------------------------------------------------------------------------------------------------------
with open("encrypted_message.txt", "wb") as file:
    file.write(encrypted_message)
---------------------------------------------------------------------------------------------------------------------------------
We open the encrypted_message.txt file in write-binary mode using the open function.
This file will store the encrypted message.
Inside the with statement, 
we call the write method of the file object to write the encrypted message bytes to the file.

---------------------------------------------------------------------------------------------------------------------------------
END of the explanation of the (input from user , encrypting it and writing it into file)
---------------------------------------------------------------------------------------------------------------------------------

